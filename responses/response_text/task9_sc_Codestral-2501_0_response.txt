To create a REST API for the `Product` data class using Ktor, you need to set up a Ktor application, define routes for the GET and POST endpoints, and implement the necessary logic for handling requests. Below is a step-by-step guide to achieve this:

1. **Add Ktor dependencies**: Ensure you have the necessary dependencies in your `build.gradle.kts` file.

```kotlin
dependencies {
    implementation("io.ktor:ktor-server-core:2.0.0")
    implementation("io.ktor:ktor-server-netty:2.0.0")
    implementation("io.ktor:ktor-server-content-negotiation:2.0.0")
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.0.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2")
}
```

2. **Create the Product data class**:

```kotlin
import kotlinx.serialization.Serializable

@Serializable
data class Product(val id: Int, val name: String, val price: Double)
```

3. **Create a simple in-memory storage for products**:

```kotlin
object ProductStorage {
    private val products = mutableListOf<Product>()

    fun getAll(): List<Product> = products

    fun getById(id: Int): Product? = products.find { it.id == id }

    fun add(product: Product) {
        products.add(product)
    }
}
```

4. **Set up the Ktor application**:

```kotlin
import io.ktor.application.*
import io.ktor.features.*
import io.ktor.http.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.serialization.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*

fun main() {
    embeddedServer(Netty, port = 8080) {
        install(ContentNegotiation) {
            json()
        }
        routing {
            get("/products") {
                val products = ProductStorage.getAll()
                call.respond(products)
            }
            get("/products/{id}") {
                val id = call.parameters["id"]?.toIntOrNull()
                val product = id?.let { ProductStorage.getById(it) }
                if (product != null) {
                    call.respond(product)
                } else {
                    call.respond(HttpStatusCode.NotFound, "Product not found")
                }
            }
            post("/products") {
                val product = call.receive<Product>()
                ProductStorage.add(product)
                call.respond(HttpStatusCode.Created, product)
            }
        }
    }.start(wait = true)
}
```

This setup does the following:

- **ContentNegotiation**: Configures Ktor to use JSON for content negotiation.
- **Routing**:
  - `GET /products`: Retrieves all products.
  - `GET /products/{id}`: Retrieves a product by its ID.
  - `POST /products`: Adds a new product.

5. **Run the application**: Execute the `main` function to start the Ktor server.

Now, you have a basic REST API using Ktor for managing `Product` resources. You can test the endpoints using tools like `curl`, Postman, or any other HTTP client.