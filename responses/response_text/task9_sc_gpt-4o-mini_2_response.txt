To convert the `Product` data class into a REST API using Ktor, we will create a simple Ktor application that includes GET and POST endpoints for managing `Product` instances. Below is an example of how you can set this up.

### Step 1: Add Ktor Dependencies

First, ensure that you have the necessary Ktor dependencies in your `build.gradle.kts` file:

```kotlin
dependencies {
    implementation("io.ktor:ktor-server-core:2.3.0")
    implementation("io.ktor:ktor-server-netty:2.3.0")
    implementation("io.ktor:ktor-serialization:2.3.0") // For JSON serialization
    implementation("io.ktor:ktor-server-content-negotiation:2.3.0") // For content negotiation
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.0") // JSON serialization
}
```

### Step 2: Create the Ktor Application

Next, create the Ktor application with the necessary endpoints. Hereâ€™s a simple example:

```kotlin
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.features.ContentNegotiation
import kotlinx.serialization.Serializable

@Serializable
data class Product(val id: Int, val name: String, val price: Double)

val products = mutableListOf<Product>()

fun main() {
    embeddedServer(Netty, port = 8080) {
        install(ContentNegotiation) {
            json()
        }

        routing {
            get("/products") {
                // Return the list of products
                call.respond(products)
            }

            post("/products") {
                // Receive a Product from the request body
                val product = call.receive<Product>()
                products.add(product)
                call.respond(HttpStatusCode.Created, product)
            }
        }
    }.start(wait = true)
}
```

### Explanation

1. **Dependencies**: We added dependencies for Ktor and JSON serialization using Kotlinx serialization.

2. **Product Data Class**: The `Product` data class is marked with `@Serializable` to allow Ktor to automatically serialize and deserialize JSON.

3. **In-Memory Store**: We use a simple mutable list `products` to store our products in memory. In a real application, you would probably want to use a database.

4. **Ktor Application**:
   - The application is set to run on port `8080`.
   - We install the `ContentNegotiation` feature to handle JSON serialization.
   - We define two endpoints:
     - **GET /products**: Returns the list of products.
     - **POST /products**: Accepts a new product in the request body, adds it to the list, and responds with the created product.

### Testing the API

You can test the API using tools like Postman or cURL.

1. **GET Request**:

```bash
curl -X GET http://localhost:8080/products
```

2. **POST Request**:

```bash
curl -X POST http://localhost:8080/products -H "Content-Type: application/json" -d '{"id": 1, "name": "Product 1", "price": 19.99}'
```

### Conclusion

This simple Ktor application provides a foundational REST API for managing products. You can expand it with additional features like error handling, validation, and persistent storage as needed.