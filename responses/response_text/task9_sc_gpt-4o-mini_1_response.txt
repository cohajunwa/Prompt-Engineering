To convert the `Product` data class into a REST API using Ktor, you'll need to follow these steps:

1. **Set up a Ktor project**: Ensure you have Ktor set up in your project. You can do this with Gradle or Maven. For this example, I'll use Gradle.

2. **Create the Ktor application**: Define the necessary routes for GET and POST requests.

3. **Handle the data in memory**: For simplicity, we will use an in-memory list to store products.

Hereâ€™s a complete example of how you can achieve this:

### 1. Set up your `build.gradle.kts`

Make sure to include the necessary dependencies for Ktor in your `build.gradle.kts` file:

```kotlin
plugins {
    application
    kotlin("jvm") version "1.7.10"
}

application {
    mainClass.set("io.ktor.server.netty.EngineMain")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("io.ktor:ktor-server-core:2.1.0")
    implementation("io.ktor:ktor-server-netty:2.1.0")
    implementation("io.ktor:ktor-gson:2.1.0")
    implementation("io.ktor:ktor-server-html-builder:2.1.0")
    implementation("ch.qos.logback:logback-classic:1.2.10")
}
```

### 2. Create your Ktor application

Create a file named `Application.kt` or `Main.kt` and write the following code:

```kotlin
import io.ktor.application.*
import io.ktor.features.ContentNegotiation
import io.ktor.gson.gson
import io.ktor.http.HttpStatusCode
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import io.ktor.request.receive

data class Product(val id: Int, val name: String, val price: Double)

fun main() {
    // In-memory storage for products
    val products = mutableListOf<Product>()

    embeddedServer(Netty, port = 8080) {
        install(ContentNegotiation) {
            gson {}
        }
        
        routing {
            route("/products") {
                // GET endpoint to retrieve all products
                get {
                    call.respond(products)
                }

                // POST endpoint to create a new product
                post {
                    val product = call.receive<Product>()
                    products.add(product)
                    call.respond(HttpStatusCode.Created, product)
                }
            }
        }
    }.start(wait = true)
}
```

### 3. Running the application

Once you have your `build.gradle.kts` set up and your `Application.kt` code written, you can run the application. You should be able to access the API at `http://localhost:8080/products`.

### 4. Testing the API

- **GET Request**: To retrieve products, you can use a tool like `curl`, Postman, or your browser:

```bash
curl -X GET http://localhost:8080/products
```

- **POST Request**: To create a new product, use the following `curl` command:

```bash
curl -X POST http://localhost:8080/products -H "Content-Type: application/json" -d '{"id": 1, "name": "Sample Product", "price": 99.99}'
```

### Conclusion

This example sets up a basic REST API using Ktor with GET and POST endpoints for the `Product` data class. You can expand upon this by adding more features such as error handling, data persistence, and more complex routing as needed.