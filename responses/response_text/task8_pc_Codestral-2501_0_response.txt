The provided `parse_csv_line` function does not handle quoted fields because it simply splits the input string by commas using the `split` method. This approach does not account for fields that may contain commas or other delimiters within quotes. To properly handle such cases, you need to implement a more sophisticated parser that respects quoted fields.

Here's an improved version of the parser that handles quoted fields:

```python
import csv
import io

def parse_csv_line(line):
    # Use the csv module to handle quoted fields
    reader = csv.reader(io.StringIO(line))
    return next(reader)  # Return the first and only line

# Example usage:
line = '"John Doe","john.doe@example.com","123 Main St, Apt 4",30'
parsed_line = parse_csv_line(line)
print(parsed_line)
```

### Explanation:
1. **csv Module**: The `csv` module in Python provides functionality to handle CSV files, including fields that contain special characters like commas or quotes.
2. **StringIO**: The `io.StringIO` class is used to create an in-memory file-like object from the input string `line`. This allows the `csv.reader` to process the string as if it were reading from a file.
3. **csv.reader**: The `csv.reader` object is created with the `io.StringIO` object. The `next(reader)` function call retrieves the first (and only) line from the reader, which is a list of fields.

This approach ensures that quoted fields are correctly handled, even if they contain commas or other delimiters.