To implement node deletion by value in a singly linked list, you need to handle different scenarios. Specifically, you need to consider cases where the node to be deleted is the head of the list, a node in the middle of the list, or the last node in the list. Here's a complete implementation of the `deleteNode` function:

```c
#include <stdio.h>
#include <stdlib.h>

// Definition of the Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to delete a node with a given key
void deleteNode(struct Node** head_ref, int key) {
    // Store head node
    struct Node* temp = *head_ref;
    struct Node* prev = NULL;

    // If head node itself holds the key to be deleted
    if (temp != NULL && temp->data == key) {
        *head_ref = temp->next; // Changed head
        free(temp);              // Free old head
        return;
    }

    // Search for the key to be deleted, keep track of the
    // previous node as we need to change 'next'
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }

    // If key was not present in linked list
    if (temp == NULL) return;

    // Unlink the node from linked list
    prev->next = temp->next;

    free(temp); // Free memory
}

// Utility function to print the linked list
void printList(struct Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

// Utility function to push a new node at the beginning of the list
void push(struct Node** head_ref, int new_data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = new_data;
    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

// Driver code
int main() {
    struct Node* head = NULL;

    // Create linked list 1->2->3->4->5
    push(&head, 5);
    push(&head, 4);
    push(&head, 3);
    push(&head, 2);
    push(&head, 1);

    printf("Created Linked list is: \n");
    printList(head);

    // Delete node with data 3
    deleteNode(&head, 3);
    printf("Linked list after deletion of 3: \n");
    printList(head);

    // Delete node with data 1 (head node)
    deleteNode(&head, 1);
    printf("Linked list after deletion of 1: \n");
    printList(head);

    // Delete node with data 5 (last node)
    deleteNode(&head, 5);
    printf("Linked list after deletion of 5: \n");
    printList(head);

    return 0;
}
```

### Explanation:
1. **Deletion of the Head Node:**
   - If the node to be deleted is the head of the list, update the head pointer to point to the next node and free the old head node.

2. **Deletion of a Middle/End Node:**
   - Traverse the list to find the node with the given key.
   - Keep track of the previous node to update its `next` pointer to skip the node to be deleted.
   - Free the node to be deleted.

3. **Utility Functions:**
   - `printList`: Prints the linked list.
   - `push`: Adds a new node at the beginning of the list.

This implementation ensures that the node is properly removed from the list and memory is freed to avoid memory leaks.