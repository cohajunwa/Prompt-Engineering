Certainly! The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Here's how you can implement a recursive function to calculate the nth Fibonacci number:

```python
def fibonacci(n):
    # Base cases
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    # Recursive call
    else:
        return fibonacci(n-1) + fibonacci(n-2)

# Example usage:
print(fibonacci(10))  # Output: 55
```

### Explanation:
1. **Base Cases:**
   - If `n` is 0, the function returns 0.
   - If `n` is 1, the function returns 1.

2. **Recursive Call:**
   - For any other value of `n`, the function calls itself with `n-1` and `n-2` and returns their sum.

### Note:
While this implementation is correct and simple, it has an exponential time complexity due to redundant calculations. For larger values of `n`, a more efficient approach like memoization or iterative calculation would be preferred.

Here's an optimized version using memoization:

```python
def fibonacci(n, memo={}):
    # Base cases
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    # Check if the value is already computed
    if n in memo:
        return memo[n]
    # Compute the value and store it in the memo dictionary
    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
    return memo[n]

# Example usage:
print(fibonacci(10))  # Output: 55
```

This version uses a dictionary `memo` to store already computed Fibonacci numbers, significantly improving performance for larger values of `n`.