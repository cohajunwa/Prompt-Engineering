Sure, here is the complete binary search implementation with the necessary corrections:

```java
public int binarySearch(int[] arr, int target) {
    int left = 0, right = arr.length - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // To avoid overflow

        // Check if target is present at mid
        if (arr[mid] == target) {
            return mid;
        }

        // If target greater, ignore left half
        if (arr[mid] < target) {
            left = mid + 1;
        }
        // If target is smaller, ignore right half
        else {
            right = mid - 1;
        }
    }

    // Target is not present in the array
    return -1;
}
```

### Explanation:
1. **Overflow Prevention**: Instead of calculating `mid` as `(left + right) / 2`, it is calculated as `left + (right - left) / 2`. This prevents potential overflow issues that can occur with large values of `left` and `right`.

2. **Target Comparison**: The middle element `arr[mid]` is compared with the `target`.
   - If `arr[mid] == target`, the target is found, and its index `mid` is returned.
   - If `arr[mid] < target`, the target must be in the right half, so `left` is updated to `mid + 1`.
   - If `arr[mid] > target`, the target must be in the left half, so `right` is updated to `mid - 1`.

3. **Loop Continuation**: The loop continues as long as `left` is less than or equal to `right`.

4. **Target Not Found**: If the loop exits without finding the target, the function returns `-1` to indicate that the target is not present in the array.

This implementation ensures that the binary search algorithm works correctly and efficiently for sorted arrays.