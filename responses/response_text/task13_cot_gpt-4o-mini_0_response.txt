To implement the node deletion by value in a singly linked list, we need to traverse the list to find the node that contains the specified value (key). Once found, we will adjust the pointers to remove that node from the list. Below is the step-by-step implementation of the `deleteNode` function.

### Step-by-Step Implementation:

1. **Check if the list is empty**: If the head is `NULL`, we should return immediately as there is nothing to delete.

2. **Handle deletion of the head node**: If the node to be deleted is the head node (i.e., it matches the key), we need to update the head pointer to the next node.

3. **Traverse the list**: If the node to be deleted is not the head, we need to traverse the list while keeping track of the previous node.

4. **Find the node**: As we traverse, we check if the current node's value matches the key. If it does, we will unlink this node.

5. **Adjust pointers**: If we found the node, update the `next` pointer of the previous node to point to the current node's next node.

6. **Free the node**: Finally, we should free the memory of the deleted node.

Here is the implementation of the above logic in C:

```c
#include <stdlib.h>
#include <stdio.h>

struct Node { 
    int data; 
    struct Node* next;
}; 

void deleteNode(struct Node** head, int key) { 
    // Step 1: Check if the list is empty
    if (*head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    
    struct Node* temp = *head; // Temporary pointer to traverse the list
    struct Node* prev = NULL; // Pointer to keep track of the previous node

    // Step 2: Check if the head node is the one to be deleted
    if (temp != NULL && temp->data == key) {
        *head = temp->next; // Change head
        free(temp); // Free old head
        return;
    }

    // Step 3: Traverse the list to find the node to be deleted
    while (temp != NULL && temp->data != key) {
        prev = temp; // Update previous node
        temp = temp->next; // Move to the next node
    }

    // Step 4: If the key was not present in the list
    if (temp == NULL) {
        printf("Node with value %d not found.\n", key);
        return;
    }

    // Step 5: Unlink the node from linked list
    prev->next = temp->next;

    // Step 6: Free the memory of the deleted node
    free(temp);
}

void printList(struct Node* node) {
    while (node != NULL) {
        printf("%d -> ", node->data);
        node = node->next;
    }
    printf("NULL\n");
}

// Function to create a new node
struct Node* newNode(int data) {
    struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = NULL;
    return new_node;
}

// Example usage
int main() {
    struct Node* head = newNode(1);
    head->next = newNode(2);
    head->next->next = newNode(3);
    head->next->next->next = newNode(4);

    printf("Original list: ");
    printList(head);

    deleteNode(&head, 3);
    printf("After deleting 3: ");
    printList(head);

    deleteNode(&head, 1);
    printf("After deleting 1 (head): ");
    printList(head);

    deleteNode(&head, 5); // Trying to delete a non-existent node

    return 0;
}
```

### Explanation of the Code:
- **Node Structure**: We define a `Node` structure with an integer data field and a pointer to the next node.
- **deleteNode Function**: This function implements the logic described above to delete a node by its value.
- **Memory Management**: We use `malloc` to allocate memory for new nodes and `free` to deallocate memory when a node is deleted.
- **Print Function**: The `printList` function is for displaying the contents of the list.
- **Example Usage**: In the `main` function, we create a linked list, print it, delete nodes, and print the list again to show the results.

This implementation handles the deletion of nodes in a singly linked list effectively, while also managing memory appropriately.