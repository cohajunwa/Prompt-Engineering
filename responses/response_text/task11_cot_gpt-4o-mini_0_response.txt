To create a function that checks if a number is prime, we can follow these steps:

### Step 1: Understand what a prime number is
A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. In other words, a prime number has exactly two distinct positive divisors: 1 and itself.

### Step 2: Identify the input and output
- **Input**: A single integer (let's call it `n`).
- **Output**: A boolean value (`True` if `n` is prime, `False` otherwise).

### Step 3: Consider edge cases
- If `n` is less than 2, it cannot be prime.
- 2 is the smallest prime number.
- Any even number greater than 2 cannot be prime.

### Step 4: Implement the logic to check for primality
1. If `n` is less than 2, return `False`.
2. If `n` is 2, return `True`.
3. If `n` is even and greater than 2, return `False`.
4. For odd numbers greater than 2, check divisibility from 3 to the square root of `n` (only odd numbers).

### Step 5: Write the function
Now we can implement the logic in Python:

```python
def is_prime(n):
    # Step 1: Check if n is less than 2
    if n < 2:
        return False
    # Step 2: Check if n is 2
    if n == 2:
        return True
    # Step 3: Check if n is even
    if n % 2 == 0:
        return False
    # Step 4: Check for factors from 3 to âˆšn
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return False
    return True
```

### Step 6: Test the function
You should test the function with a variety of inputs to ensure it works correctly:

```python
print(is_prime(1))  # False
print(is_prime(2))  # True
print(is_prime(3))  # True
print(is_prime(4))  # False
print(is_prime(5))  # True
print(is_prime(29)) # True
print(is_prime(30)) # False
```

### Conclusion
The function `is_prime` is designed to efficiently check whether a number is prime, considering various edge cases and using a method that minimizes unnecessary calculations.